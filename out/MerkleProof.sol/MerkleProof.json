{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202d94055b06ccfd5b415b31c377a5905731f2b9ae5bdc76b8dcf19fc29013fc1d64736f6c63430008170033","sourceMap":"508:1778:53:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;508:1778:53;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202d94055b06ccfd5b415b31c377a5905731f2b9ae5bdc76b8dcf19fc29013fc1d64736f6c63430008170033","sourceMap":"508:1778:53:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Trees proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vendor/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":'@openzeppelin/=lib/openzeppelin-contracts/contracts/'/\",\":'forge-std/=lib/forge-std/'/\",\":@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"contracts/vendor/MerkleProof.sol\":{\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e8a1dd0eac2fa865dc9a052bee01eec31677d7bc01b5b5aa825d820f3f1b343\",\"dweb:/ipfs/QmR8WuNeoAvJhnL7msQfQwaZEkwVnNyNDUNBL3Y616ohYa\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["'@openzeppelin/=lib/openzeppelin-contracts/contracts/'/","'forge-std/=lib/forge-std/'/","@openzeppelin/=lib/openzeppelin-contracts/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/vendor/MerkleProof.sol":"MerkleProof"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/vendor/MerkleProof.sol":{"keccak256":"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a","urls":["bzz-raw://1e8a1dd0eac2fa865dc9a052bee01eec31677d7bc01b5b5aa825d820f3f1b343","dweb:/ipfs/QmR8WuNeoAvJhnL7msQfQwaZEkwVnNyNDUNBL3Y616ohYa"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"contracts/vendor/MerkleProof.sol","id":18347,"exportedSymbols":{"MerkleProof":[18346]},"nodeType":"SourceUnit","src":"118:2169:53","nodes":[{"id":18255,"nodeType":"PragmaDirective","src":"118:23:53","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":18346,"nodeType":"ContractDefinition","src":"508:1778:53","nodes":[{"id":18277,"nodeType":"FunctionDefinition","src":"862:184:53","nodes":[],"body":{"id":18276,"nodeType":"Block","src":"989:57:53","nodes":[],"statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":18274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":18270,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18260,"src":"1019:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":18271,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18264,"src":"1026:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":18269,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18334,"src":"1006:12:53","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":18272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1006:25:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":18273,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18262,"src":"1035:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1006:33:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":18268,"id":18275,"nodeType":"Return","src":"999:40:53"}]},"documentation":{"id":18257,"nodeType":"StructuredDocumentation","src":"534:323:53","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"871:6:53","parameters":{"id":18265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18260,"mutability":"mutable","name":"proof","nameLocation":"904:5:53","nodeType":"VariableDeclaration","scope":18277,"src":"887:22:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":18258,"name":"bytes32","nodeType":"ElementaryTypeName","src":"887:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":18259,"nodeType":"ArrayTypeName","src":"887:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":18262,"mutability":"mutable","name":"root","nameLocation":"927:4:53","nodeType":"VariableDeclaration","scope":18277,"src":"919:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":18261,"name":"bytes32","nodeType":"ElementaryTypeName","src":"919:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":18264,"mutability":"mutable","name":"leaf","nameLocation":"949:4:53","nodeType":"VariableDeclaration","scope":18277,"src":"941:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":18263,"name":"bytes32","nodeType":"ElementaryTypeName","src":"941:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:82:53"},"returnParameters":{"id":18268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":18277,"src":"983:4:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":18266,"name":"bool","nodeType":"ElementaryTypeName","src":"983:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"982:6:53"},"scope":18346,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":18334,"nodeType":"FunctionDefinition","src":"1398:662:53","nodes":[],"body":{"id":18333,"nodeType":"Block","src":"1490:570:53","nodes":[],"statements":[{"assignments":[18289],"declarations":[{"constant":false,"id":18289,"mutability":"mutable","name":"computedHash","nameLocation":"1508:12:53","nodeType":"VariableDeclaration","scope":18333,"src":"1500:20:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":18288,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1500:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":18291,"initialValue":{"id":18290,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18283,"src":"1523:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1500:27:53"},{"body":{"id":18329,"nodeType":"Block","src":"1580:445:53","statements":[{"assignments":[18304],"declarations":[{"constant":false,"id":18304,"mutability":"mutable","name":"proofElement","nameLocation":"1602:12:53","nodeType":"VariableDeclaration","scope":18329,"src":"1594:20:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":18303,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1594:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":18308,"initialValue":{"baseExpression":{"id":18305,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18281,"src":"1617:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":18307,"indexExpression":{"id":18306,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18293,"src":"1623:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1617:8:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1594:31:53"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":18311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":18309,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18289,"src":"1643:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":18310,"name":"proofElement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18304,"src":"1659:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1643:28:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":18327,"nodeType":"Block","src":"1847:168:53","statements":[{"expression":{"id":18325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":18320,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18289,"src":"1943:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":18322,"name":"proofElement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18304,"src":"1973:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":18323,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18289,"src":"1987:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":18321,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18345,"src":"1958:14:53","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":18324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1958:42:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1943:57:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":18326,"nodeType":"ExpressionStatement","src":"1943:57:53"}]},"id":18328,"nodeType":"IfStatement","src":"1639:376:53","trueBody":{"id":18319,"nodeType":"Block","src":"1673:168:53","statements":[{"expression":{"id":18317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":18312,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18289,"src":"1769:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":18314,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18289,"src":"1799:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":18315,"name":"proofElement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18304,"src":"1813:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":18313,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18345,"src":"1784:14:53","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":18316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1784:42:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1769:57:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":18318,"nodeType":"ExpressionStatement","src":"1769:57:53"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":18299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":18296,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18293,"src":"1557:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":18297,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18281,"src":"1561:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":18298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1567:6:53","memberName":"length","nodeType":"MemberAccess","src":"1561:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1557:16:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":18330,"initializationExpression":{"assignments":[18293],"declarations":[{"constant":false,"id":18293,"mutability":"mutable","name":"i","nameLocation":"1550:1:53","nodeType":"VariableDeclaration","scope":18330,"src":"1542:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":18292,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":18295,"initialValue":{"hexValue":"30","id":18294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1554:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1542:13:53"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":18301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1575:3:53","subExpression":{"id":18300,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18293,"src":"1575:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":18302,"nodeType":"ExpressionStatement","src":"1575:3:53"},"nodeType":"ForStatement","src":"1537:488:53"},{"expression":{"id":18331,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18289,"src":"2041:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":18287,"id":18332,"nodeType":"Return","src":"2034:19:53"}]},"documentation":{"id":18278,"nodeType":"StructuredDocumentation","src":"1052:341:53","text":" @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"1407:12:53","parameters":{"id":18284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18281,"mutability":"mutable","name":"proof","nameLocation":"1437:5:53","nodeType":"VariableDeclaration","scope":18334,"src":"1420:22:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":18279,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1420:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":18280,"nodeType":"ArrayTypeName","src":"1420:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":18283,"mutability":"mutable","name":"leaf","nameLocation":"1452:4:53","nodeType":"VariableDeclaration","scope":18334,"src":"1444:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":18282,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1444:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1419:38:53"},"returnParameters":{"id":18287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":18334,"src":"1481:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":18285,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1481:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1480:9:53"},"scope":18346,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":18345,"nodeType":"FunctionDefinition","src":"2066:218:53","nodes":[],"body":{"id":18344,"nodeType":"Block","src":"2149:135:53","nodes":[],"statements":[{"AST":{"nativeSrc":"2168:110:53","nodeType":"YulBlock","src":"2168:110:53","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2189:4:53","nodeType":"YulLiteral","src":"2189:4:53","type":"","value":"0x00"},{"name":"a","nativeSrc":"2195:1:53","nodeType":"YulIdentifier","src":"2195:1:53"}],"functionName":{"name":"mstore","nativeSrc":"2182:6:53","nodeType":"YulIdentifier","src":"2182:6:53"},"nativeSrc":"2182:15:53","nodeType":"YulFunctionCall","src":"2182:15:53"},"nativeSrc":"2182:15:53","nodeType":"YulExpressionStatement","src":"2182:15:53"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2217:4:53","nodeType":"YulLiteral","src":"2217:4:53","type":"","value":"0x20"},{"name":"b","nativeSrc":"2223:1:53","nodeType":"YulIdentifier","src":"2223:1:53"}],"functionName":{"name":"mstore","nativeSrc":"2210:6:53","nodeType":"YulIdentifier","src":"2210:6:53"},"nativeSrc":"2210:15:53","nodeType":"YulFunctionCall","src":"2210:15:53"},"nativeSrc":"2210:15:53","nodeType":"YulExpressionStatement","src":"2210:15:53"},{"nativeSrc":"2238:30:53","nodeType":"YulAssignment","src":"2238:30:53","value":{"arguments":[{"kind":"number","nativeSrc":"2257:4:53","nodeType":"YulLiteral","src":"2257:4:53","type":"","value":"0x00"},{"kind":"number","nativeSrc":"2263:4:53","nodeType":"YulLiteral","src":"2263:4:53","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"2247:9:53","nodeType":"YulIdentifier","src":"2247:9:53"},"nativeSrc":"2247:21:53","nodeType":"YulFunctionCall","src":"2247:21:53"},"variableNames":[{"name":"value","nativeSrc":"2238:5:53","nodeType":"YulIdentifier","src":"2238:5:53"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":18336,"isOffset":false,"isSlot":false,"src":"2195:1:53","valueSize":1},{"declaration":18338,"isOffset":false,"isSlot":false,"src":"2223:1:53","valueSize":1},{"declaration":18341,"isOffset":false,"isSlot":false,"src":"2238:5:53","valueSize":1}],"id":18343,"nodeType":"InlineAssembly","src":"2159:119:53"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"2075:14:53","parameters":{"id":18339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18336,"mutability":"mutable","name":"a","nameLocation":"2098:1:53","nodeType":"VariableDeclaration","scope":18345,"src":"2090:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":18335,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2090:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":18338,"mutability":"mutable","name":"b","nameLocation":"2109:1:53","nodeType":"VariableDeclaration","scope":18345,"src":"2101:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":18337,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2101:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2089:22:53"},"returnParameters":{"id":18342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18341,"mutability":"mutable","name":"value","nameLocation":"2142:5:53","nodeType":"VariableDeclaration","scope":18345,"src":"2134:13:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":18340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2134:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2133:15:53"},"scope":18346,"stateMutability":"pure","virtual":false,"visibility":"private"}],"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":18256,"nodeType":"StructuredDocumentation","src":"143:364:53","text":" @dev These functions deal with verification of Merkle Trees proofs.\n The proofs can be generated using the JavaScript library\n https://github.com/miguelmota/merkletreejs[merkletreejs].\n Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n See `test/utils/cryptography/MerkleProof.test.js` for some examples."},"fullyImplemented":true,"linearizedBaseContracts":[18346],"name":"MerkleProof","nameLocation":"516:11:53","scope":18347,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":53}